<?php

/**
 * @file
 * USA Today Sports Images media integration.
 */

/**
 * Init function.
 */
function media_usatsi_init() {
  drupal_add_js(drupal_get_path('module', 'media_usatsi') . '/js/jquery.simplePagination.js');
  drupal_add_js(drupal_get_path('module', 'media_usatsi') . '/js/media_usatsi_main.js');
  drupal_add_css(drupal_get_path('module', 'media_usatsi') . '/css/media_usatsi_styles.css');
}

/**
 * Implements hook_menu().
 */
function media_usatsi_menu() {

  $items['admin/config/media/usatsi'] = array(
    'title' => 'USA Today',
    'description' => 'Settings for media usatsi module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_usatsi_admin'),
    'access arguments' => array('administer media browser'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'media_usatsi.admin.inc',
  );

  $items['file/add/usatsi'] = array(
    'title' => 'USA Today',
    'description' => 'Add images from USA Today images to your media library.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_usatsi_external'),
    'access arguments' => array('access media browser'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'file_entity.pages.inc',
    'file path' => drupal_get_path('module', 'file_entity'),
    'menu_name' => 'usatsi-menu-tab',
    'options' => array(
      'attributes' => array(
        'class' => array('media-usatsi'),
      ),
    ),

  );

  $items['media_usatsi/ajax/%/%/%'] = array(
    'page callback' => 'media_usatsi_ajax',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'media_usatsi_ajax',
  );

  return $items;
}

/**
 * Callback to return JSON encoded image for given id.
 */
function media_usatsi_ajax($id, $form, $form_state) {
  // USAT SI API key.
  $usatsi_api = variable_get('media_usatsi_api', "");
  $usatsi_api_secret = variable_get('media_usatsi_api_secret', "");

  //Does user want low resolution images when importing.
  $resolution_setting = variable_get('media_usatsi_resolution_toggle', "hi");
  if ( $resolution_setting == 'low' ) {
    $resParam = "&lowres=1";
  } else {
    $resParam = "&lowres=0";
  }

  $image_vendor = 'sipa';//$form_state['storage']['field_file_image_vendor_hidden'];
  if ( $image_vendor == 'sipa') {
    $baseUrl = "http://beta-stage.usatsimg.com/api/downloadSipa/";
  } else {
    $baseUrl = "http://beta-stage.usatsimg.com/api/download/";
  }

  // Oauth Params.

  $consumerSecret = $usatsi_api_secret;
  $consumerKey = $usatsi_api;
  $oauthTimestamp = time();
  $nonce = md5(mt_rand());
  $oauthSignatureMethod = "HMAC-SHA1";
  $oauthVersion = "1.0";
  $imageid = explode('.', $id)[0];

  $sigBase = "GET&" . rawurlencode($baseUrl) . "&"
    . rawurlencode(
        "imageID=" . rawurlencode($imageid)
        . $resParam
        . "&oauth_consumer_key=" . rawurlencode($consumerKey)
        . "&oauth_nonce=" . rawurlencode($nonce)
        . "&oauth_signature_method=" . rawurlencode($oauthSignatureMethod)
        . "&oauth_timestamp=" . rawurlencode($oauthTimestamp)
        . "&oauth_version=" . rawurlencode($oauthVersion)
    );
  $sigKey = $consumerSecret . "&";
  $oauthSig = base64_encode(hash_hmac("sha1", $sigBase, $sigKey, TRUE));

  $requestUrl = $baseUrl . "?oauth_consumer_key=" . rawurlencode($consumerKey)
    . "&oauth_nonce=" . rawurlencode($nonce)
    . "&oauth_signature_method=" . rawurlencode($oauthSignatureMethod)
    . "&oauth_timestamp=" . rawurlencode($oauthTimestamp)
    . "&oauth_version=" . rawurlencode($oauthVersion)
    . "&oauth_signature=" . rawurlencode($oauthSig)
    . "&imageID=" . rawurlencode($imageid)
    . $resParam;

  $response = drupal_http_request($requestUrl);
  header("Content-Type: image/jpeg");
  echo $response->data;
}

/**
 * Implements hook_theme().
 */
function media_usatsi_theme($existing, $type, $theme, $path) {
  return array(
    'media_usatsi_list' => array(
      'variables' => array(
        'images' => NULL,
      ),
      'template' => 'media-usatsi-list',
      'path' => drupal_get_path('module', 'media_usatsi') . '/templates',
    ),
  );
}

/**
 * Implements hook_forms().
 */
function media_usatsi_forms($form_id, $args) {
  $forms = array();

  // Create a copy of the upload wizard form for internet media.
  if ($form_id == 'media_usatsi_external') {
    $forms[$form_id] = array(
      'callback' => 'file_entity_add_upload',
    );
  }

  return $forms;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_usatsi_form_file_entity_edit_alter(&$form, &$form_state) {
  // Make adjustments to the file edit form when used in a CTools modal.
  if (!empty($form_state['ajax'])) {
    // Remove the preview and the delete button.
    $form['preview']['#access'] = FALSE;
    $form['actions']['delete']['#access'] = FALSE;

    // Convert the cancel link to a button which triggers a modal close.
    $form['actions']['cancel']['#attributes']['class'][] = 'button';
    $form['actions']['cancel']['#attributes']['class'][] = 'button-no';
    $form['actions']['cancel']['#attributes']['class'][] = 'ctools-close-modal';

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_usatsi_form_file_entity_add_upload_alter(&$form, &$form_state, $form_id) {

  $step = $form['#step'];
  $options = $form['#options'];

  // Swap the upload field for an embed field when on the first step of the web
  // tab.
  if ($form_id === 'media_usatsi_external' ) {
    unset($form['upload']);

    // Add JS.
    drupal_add_js(drupal_get_path('module', 'media_usatsi') . '/js/media_usatsi.js');
    // Add CSS.
    drupal_add_css(drupal_get_path('module', 'media_usatsi') . '/css/media_usatsi.css');


    if ( $step == 1 ) {
      $form['external_image'] = array(
        '#type' => 'textfield',
        '#reguired' => 1,
        '#attributes' => array('placeholder' => t('Enter search term')),
      );

      $form['embed_code'] = array(
        '#type' => 'hidden',
        '#title' => t('File URL'),
        '#description' => t('Enter a URL to a file.'),
        '#maxlength' => 2083,
        '#default_value' => isset($form_state['storage']['embed_code']) ? $form_state['storage']['embed_code'] : NULL,
      );

    }



    $form['field_file_image_title_text_hidden'] = array(
      '#type' => 'hidden',
      '#maxlength' => 256,
      '#default_value' => isset($form_state['storage']['field_file_image_title_text']) ? $form_state['storage']['field_file_image_title_text'] : NULL,
    );

    $form['field_file_image_alt_text_hidden'] = array(
      '#type' => 'hidden',
      '#maxlength' => 256,
      '#default_value' => isset($form_state['storage']['field_file_image_alt_text']) ? $form_state['storage']['field_file_image_alt_text'] : NULL,
    );

    $form['field_file_image_attribution_hidden'] = array(
      '#type' => 'hidden',
      '#maxlength' => 256,
      '#default_value' => isset($form_state['storage']['field_file_image_attribution']) ? $form_state['storage']['field_file_image_attribution'] : NULL,
    );

    $form['field_file_image_thumbnail_hidden'] = array(
      '#type' => 'hidden',
      '#maxlength' => 2083,
      '#default_value' => '',
    );

    $form['field_usatsi_pagenum_hidden'] = array(
      '#type' => 'hidden',
      '#maxlength' => 256,
    );

    $form['field_file_image_vendor_hidden'] = array(
      '#type' => 'hidden',
      '#maxlength' => 256,
      '#default_value' => isset($form_state['storage']['field_file_image_vendor_hidden']) ? $form_state['storage']['field_file_image_vendor_hidden'] : NULL,
    );


    if ( $step == 1 ) {
      $form['search'] = array(
        '#type' => 'submit',
        '#value' => t('Search'),
        '#input' => TRUE,
        '#name' => 'op',
        '#button_type' => 'submit',
        '#executes_submit_callback' => FALSE,
        '#limit_validation_errors' => FALSE,
        '#process' => array('ajax_process_form'),
        '#theme_wrappers' => array('button'),
        '#ajax' => array(
          'callback' => 'media_usatsi_external_ajax_callback',
          'wrapper' => 'usatsi-output',
          'event' => 'click',
        ),
      );

      // Blank output field which we will fill using AJAX.
      $form['output'] = array(
        '#prefix' => '<div id="usatsi-output">',
        '#suffix' => '</div>',
        '#markup' => '',
      );

      $form['#validators'] = array();

      if (!empty($options['types'])) {
        $form['#validators']['media_file_validate_types'] = array($options['types']);
      }

      // Add validation and submission handlers to the form and ensure that they
      // run first.
      array_unshift($form['#validate'], 'media_usatsi_add_validate');
      array_unshift($form['#submit'], 'media_internet_add_submit');

    }



  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function media_usatsi_form_alter(&$form, $form_state, $form_id) {

  if (isset($_POST['field_file_image_alt_text_hidden'])) {
    $form['preview'] = array(
      '#markup' => '<img src="' . $_POST['field_file_image_thumbnail_hidden'] . '" id="media-usatsi-preview" class="media-usatsi-thumbnail" /> ',
    );
    $form['field_file_image_alt_text'][LANGUAGE_NONE][0]['value']['#value'] = $_POST['field_file_image_alt_text_hidden'];
    $form['field_file_image_title_text'][LANGUAGE_NONE][0]['value']['#value'] = $_POST['field_file_image_title_text_hidden'];
    $form['field_file_image_attribution'][LANGUAGE_NONE][0]['value']['#value'] = $_POST['field_file_image_attribution_hidden'];
  }

}

/**
 * AJAX callback function for media_usatsi_external().
 */
function media_usatsi_external_ajax_callback($form, $form_state) {

  // Search input.
  $search_term = check_plain($form_state['values']['external_image']);

  $page_num = 1;

  if (!empty($form_state['values']['field_usatsi_pagenum_hidden'])) {
    $page_num = $form_state['values']['field_usatsi_pagenum_hidden'];
  }

  // Receive content.
  $content = media_usatsi_search($search_term, $page_num);

  $output = theme(
        'media_usatsi_list', array(
          'images' => $content,
        )
    );

  // Return ajax.
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_html('#usatsi-output', $output),
      array(
        'command' => 'afterAjaxScheduleAdded',
      ),
      array(
        'command' => 'media_usatsi_pagination',
        'pageNumber' => $page_num,
        'totalImages' => $content['totalImages'],
      ),
    ),
  );

}

/**
 * Main function for interaction with USA Today Sports Images API.
 *
 * @param string $search_term
 *   String of terms and keywords to search on.
 * @param string $page_num
 *   String upon which we call usatsi api.
 *
 * @return string
 *   Return HTML.
 */
function media_usatsi_search($search_term, $page_num = 1) {

  // USAT SI API key.
  $usatsi_api = variable_get('media_usatsi_api', "");
  $usatsi_api_secret = variable_get('media_usatsi_api_secret', "");

  if (empty($usatsi_api)) {
    return t('Please insert API Key on module settings page');
  }

  if (empty($usatsi_api_secret)) {
    return t('Please insert API Secret on module settings page');
  }

  $cid = 'media:usatsi:' . $search_term . ':' . ($page_num ? $page_num : 1);

  // If a cached entry exists, return it.
  if ($cached = cache_get($cid)) {
    $content = $cached->data;
  }
  else {

    // Oauth Params.
    $baseUrl = "http://beta-stage.usatsimg.com/api/searchAPI/";
    $consumerSecret = $usatsi_api_secret;
    $consumerKey = $usatsi_api;
    $oauthTimestamp = time();
    $nonce = md5(mt_rand());
    $oauthSignatureMethod = "HMAC-SHA1";
    $oauthVersion = "1.0";
    $keywords = $search_term;
    $terms = $search_term;

    $sigBase = "GET&" . rawurlencode($baseUrl) . "&"
        . rawurlencode(
        "keywords=" . rawurlencode($keywords)
        . "&limit=100&oauth_consumer_key=" . rawurlencode($consumerKey)
        . "&oauth_nonce=" . rawurlencode($nonce)
        . "&oauth_signature_method=" . rawurlencode($oauthSignatureMethod)
        . "&oauth_timestamp=" . $oauthTimestamp
        . "&oauth_version=" . $oauthVersion
        . "&offset=" . $page_num
        . "&sipa=1&terms=" . rawurlencode($terms)
    );

    $sigKey = $consumerSecret . "&";
    $oauthSig = base64_encode(hash_hmac("sha1", $sigBase, $sigKey, TRUE));

    $requestUrl = $baseUrl . "?oauth_consumer_key=" . rawurlencode($consumerKey)
          . "&oauth_nonce=" . rawurlencode($nonce)
          . "&oauth_signature_method=" . rawurlencode($oauthSignatureMethod)
          . "&oauth_timestamp=" . rawurlencode($oauthTimestamp)
          . "&oauth_version=" . rawurlencode($oauthVersion)
          . "&oauth_signature=" . rawurlencode($oauthSig)
          . "&sipa=1&terms=" . rawurlencode($terms)
          . "&keywords=" . rawurlencode($keywords)
          . "&limit=100&offset=" . $page_num;

    $response = drupal_http_request($requestUrl);

    if ($response->code == 200) {

      $json_response = drupal_json_decode($response->data);

      // Define result as array.
      $images = array();

      foreach ($json_response['results']['item'] as $row => $response_data) {
        foreach ($response_data as $innerRow => $value) {

          $caption_start_idx = (strrpos($value['caption'], ';') ? strrpos($value['caption'], ';') + 1 : 0);
          $caption_end_idx = strlen($value['caption']) - 1;
          $caption_credit_idx = (strrpos($value['caption'], 'Mandatory Credit:') != -1 ? strrpos($value['caption'], 'Mandatory Credit:') : $caption_end_idx);



          $thumb = $value['thumbUrl'];
          $title = $value['headline'];
          $id = $value['uniqueId'];
          $full = $GLOBALS['base_url'] . '/media_usatsi/ajax/' . $id . '.jpg';
          $date_created = $value['dateCreate'];
          $keywords = $value['keywords'][0];
          $caption = substr($value['caption'], $caption_start_idx, $caption_end_idx - $caption_credit_idx);
          $credit = $value['credit'];
          $previewUrl = $value['previewUrl'];
          $historical = 0;
          $parentId = $value['parentId'];
          $uniqueId = $value['uniqueId'];
          $vendor_type = ( $value['isSipa'] ? 'sipa' : 'usat' );

          $download_url = $full;
          $people_string = '';

          // Is the image historical!
          $time_is = REQUEST_TIME;
          $image_time_is = strtotime($date_created);
          $timediff = floor((($time_is - $image_time_is) / (60 * 60 * 24)) / 365);

          if ($timediff >= 4) {
            $historical = 1;
          }

          foreach ($keywords as $row => $keyword) {
            foreach ($keyword as $item => $people) {
              if (array_key_exists('People', $people)) {
                $people_string = $people['People'];
              }
            }
            if (!empty($people_string)) {
              break;
            }
          }

          $images[] = array(
            'download' => $download_url,
            'thumb' => $thumb,
            'title' => $title,
            'date_created' => format_date(strtotime($date_created), 'custom', 'M j, Y'),
            'people' => $people_string,
            'caption' => $caption,
            'credit' => $credit,
            'previewUrl' => $previewUrl,
            'historical' => $historical,
            'parentid' => $parentId,
            'uniqueId' => $uniqueId,
            'vendor_type' => $vendor_type,

          );
        }
      }
      $content = $images;
      $content['totalImages'] = $json_response['results']['totalAvailableImages'];

    }
  }

  return $content;

}

/**
 * Allow stream wrappers to have their chance at validation.
 *
 * Any module that implements hook_media_parse will have an
 * opportunity to validate this.
 *
 * @see media_parse_to_uri()
 */
function media_usatsi_add_validate($form, &$form_state) {

  $embed_code = $form_state['values']['embed_code'];

  // See @file_entity_add_upload_submit
  // Needed for skipping fields if is enabled and if Web tab is active.
  $form_state['triggering_element']['#id'] = 'edit-next';

  if (!empty($embed_code)) {
    try {
      $provider = media_internet_get_provider($embed_code);
      $provider->validate();
    }
    catch (MediaInternetNoHandlerException $e) {
      form_set_error('embed_code', $e->getMessage());
      return;
    }
    catch (MediaInternetValidationException $e) {
      form_set_error('embed_code', $e->getMessage());
      return;
    }

    $validators = $form['#validators'];
    $file = $provider->getFileObject();

    if ($validators) {
      try {
        $file = $provider->getFileObject();
      }
      catch (Exception $e) {
        form_set_error('embed_code', $e->getMessage());
        return;
      }

      $errors = file_validate($file, $validators);

      if (!empty($errors)) {
        $message = t('%url could not be added.', array('%url' => $embed_code));
        if (count($errors) > 1) {
          $message .= theme('item_list', array('items' => $errors));
        }
        else {
          $message .= ' ' . array_pop($errors);
        }
        form_set_error('embed_code', $message);
        return FALSE;
      }
    }
  }

  else {
    return FALSE;
  }
}
